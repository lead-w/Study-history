(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{201:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"js基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js基础","aria-hidden":"true"}},[t._v("#")]),t._v(" js基础")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#类型转换"}},[t._v("类型转换")]),a("ul",[a("li",[a("a",{attrs:{href:"#valueof-tostring"}},[t._v("valueOf&&toString")])]),a("li",[a("a",{attrs:{href:"#"}},[t._v("+")])])])]),a("li",[a("a",{attrs:{href:"#script-标签"}},[t._v("script 标签")])]),a("li",[a("a",{attrs:{href:"#五种数据类型"}},[t._v("五种数据类型")])]),a("li",[a("a",{attrs:{href:"#二进制操作符号"}},[t._v("二进制操作符号")])]),a("li",[a("a",{attrs:{href:"#一元操作符"}},[t._v("一元操作符")])]),a("li",[a("a",{attrs:{href:"#变量作用域"}},[t._v("变量作用域")]),a("ul",[a("li",[a("a",{attrs:{href:"#延迟作用域链"}},[t._v("延迟作用域链")])]),a("li",[a("a",{attrs:{href:"#变量声明"}},[t._v("变量声明")])])])]),a("li",[a("a",{attrs:{href:"#引用类型"}},[t._v("引用类型")]),a("ul",[a("li",[a("a",{attrs:{href:"#创建对象"}},[t._v("创建对象")])]),a("li",[a("a",{attrs:{href:"#创建数组"}},[t._v("创建数组")])]),a("li",[a("a",{attrs:{href:"#date"}},[t._v("Date")])]),a("li",[a("a",{attrs:{href:"#正则"}},[t._v("正则")])]),a("li",[a("a",{attrs:{href:"#函数"}},[t._v("函数")])])])]),a("li",[a("a",{attrs:{href:"#global对象"}},[t._v("Global对象")])]),a("li",[a("a",{attrs:{href:"#创建对象"}},[t._v("创建对象")])]),a("li",[a("a",{attrs:{href:"#继承"}},[t._v("继承")])]),a("li",[a("a",{attrs:{href:"#函数"}},[t._v("函数")])]),a("li",[a("a",{attrs:{href:"#闭包"}},[t._v("闭包")])]),a("li",[a("a",{attrs:{href:"#this"}},[t._v("this")])]),a("li",[a("a",{attrs:{href:"#window"}},[t._v("window")])]),a("li",[a("a",{attrs:{href:"#dom"}},[t._v("DOM")]),a("ul",[a("li",[a("a",{attrs:{href:"#节点关系"}},[t._v("节点关系")])]),a("li",[a("a",{attrs:{href:"#节点操作"}},[t._v("节点操作")])]),a("li",[a("a",{attrs:{href:"#document"}},[t._v("document")])]),a("li",[a("a",{attrs:{href:"#查找元素"}},[t._v("查找元素")])]),a("li",[a("a",{attrs:{href:"#element"}},[t._v("Element")])]),a("li",[a("a",{attrs:{href:"#文本"}},[t._v("文本")])]),a("li",[a("a",{attrs:{href:"#动态脚本"}},[t._v("动态脚本")])]),a("li",[a("a",{attrs:{href:"#动态样式"}},[t._v("动态样式")])]),a("li",[a("a",{attrs:{href:"#选择符"}},[t._v("选择符")])]),a("li",[a("a",{attrs:{href:"#焦点"}},[t._v("焦点")])]),a("li",[a("a",{attrs:{href:"#readystate-属性"}},[t._v("readyState 属性")])]),a("li",[a("a",{attrs:{href:"#浏览器模式-document-compatmode"}},[t._v("浏览器模式(document.compatMode)")])]),a("li",[a("a",{attrs:{href:"#标签自定义属性"}},[t._v("标签自定义属性")])]),a("li",[a("a",{attrs:{href:"#插入标记"}},[t._v("插入标记")])]),a("li",[a("a",{attrs:{href:"#scrollintoview-作用于每一个元素"}},[t._v("scrollIntoView() 作用于每一个元素")])]),a("li",[a("a",{attrs:{href:"#children-返回元素元素的子节点-文本会过滤掉"}},[t._v("children 返回元素元素的子节点 文本会过滤掉")])]),a("li",[a("a",{attrs:{href:"#contains-被检测的节点是后代子节点"}},[t._v("contains() 被检测的节点是后代子节点")])]),a("li",[a("a",{attrs:{href:"#comparedocumentposition-返回节点间的位子关系"}},[t._v("compareDocumentPosition 返回节点间的位子关系")])]),a("li",[a("a",{attrs:{href:"#插入文本"}},[t._v("插入文本")])])])]),a("li",[a("a",{attrs:{href:"#dom2"}},[t._v("DOM2")]),a("ul",[a("li",[a("a",{attrs:{href:"#style-变化"}},[t._v("style 变化")])]),a("li",[a("a",{attrs:{href:"#计算样式"}},[t._v("计算样式")])]),a("li",[a("a",{attrs:{href:"#操作样式表"}},[t._v("操作样式表")])]),a("li",[a("a",{attrs:{href:"#元素大小"}},[t._v("元素大小")])]),a("li",[a("a",{attrs:{href:"#遍历"}},[t._v("遍历")])])])]),a("li",[a("a",{attrs:{href:"#事件"}},[t._v("事件")]),a("ul",[a("li",[a("a",{attrs:{href:"#ui事件"}},[t._v("UI事件")])]),a("li",[a("a",{attrs:{href:"#焦点事件-还有其他的不常用具体看书"}},[t._v("焦点事件(还有其他的不常用具体看书)")])]),a("li",[a("a",{attrs:{href:"#鼠标事件-具体的看书"}},[t._v("鼠标事件(具体的看书)")])]),a("li",[a("a",{attrs:{href:"#键盘事件"}},[t._v("键盘事件")])]),a("li",[a("a",{attrs:{href:"#h5事件"}},[t._v("h5事件")])]),a("li",[a("a",{attrs:{href:"#事件委托"}},[t._v("事件委托")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换","aria-hidden":"true"}},[t._v("#")]),t._v(" 类型转换")]),t._v(" "),a("ul",[a("li",[t._v("三等不转换数据类型,两等转换数据类型")]),t._v(" "),a("li",[t._v("NaN 谁都不和他相等")]),t._v(" "),a("li",[t._v("null==undefined null和undefined两个等号相等，三个等号不相等")]),t._v(" "),a("li",[t._v("对象 == 字符串 会把对象转成字符串再比较")]),t._v(" "),a("li",[t._v("剩余的都转换为数字进行比较")])]),t._v(" "),a("h3",{attrs:{id:"valueof-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof-tostring","aria-hidden":"true"}},[t._v("#")]),t._v(" valueOf&&toString")]),t._v(" "),a("h3",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")]),t._v(" +")]),t._v(" "),a("ul",[a("li",[t._v("1、两个操作数如果是number则直接相加出结果")]),t._v(" "),a("li",[t._v("2、如果其中有一个操作数为string，则将另一个操作数隐式的转换成string,然后在进行字符串拼接出结果")]),t._v(" "),a("li",[t._v("3、如果操作的是复杂数据类型,直接将他们转换成字符串,进行拼接")]),t._v(" "),a("li",[t._v("4、如果两个操作数是boolean,那么将他们转换成number相加")]),t._v(" "),a("li",[t._v("5、比较的时候会转换成数值进行比较")]),t._v(" "),a("li",[t._v("几个例子")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果操作的是复杂数据类型,直接将他们转换成字符串,进行拼接")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '',对象相加 转string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object],对象相加 转string ([]=>'',{}=>[object Object])  ")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object],注意js把()中的语句当做一个表达式,因此{}不能被理解为语句块,被理解成一个对象")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object][object Object] ")]),t._v("\n")])])]),a("ul",[a("li",[t._v("布尔")]),t._v(" "),a("li",[t._v("比较的时候会转换成数值进行比较")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false 他们比较的是引用地址值的不同")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true [].toString() 转换成值是0,![]=>false=>0")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false 引用地址不一样")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false  {} => [object Object] 所以不等")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"script-标签"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#script-标签","aria-hidden":"true"}},[t._v("#")]),t._v(" script 标签")]),t._v(" "),a("ul",[a("li",[t._v("6个属性 async defer charset language src type")]),t._v(" "),a("li",[t._v("注意\n"),a("ul",[a("li",[t._v("1、script 标签内 不能存在"),t._v("字符串 可以加反斜杠转义")]),t._v(" "),a("li",[t._v("2、script标签放到head中 js会等head中的js全部被下载和解析后在执行body")]),t._v(" "),a("li",[t._v("3、所以一般放到 body内 加快显示时间")]),t._v(" "),a("li",[t._v("4、derfer 延迟执行 遇到"),t._v("才会执行,也就是页面都解析完毕后在运行,一般都是先后顺序执行,先于 DOMContentLoad 事件")]),t._v(" "),a("li",[t._v("5、async 异步执行 立即下载 执行顺序不是先后 一定会在load事件前执行 可能会在 DOMContentLoad 事件前后执行\n他们两个只适应外部脚本")])])])]),t._v(" "),a("h2",{attrs:{id:"五种数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五种数据类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 五种数据类型")]),t._v(" "),a("ul",[a("li",[t._v("Undefined Null Boolean Number String(typeof 获取类型值)")]),t._v(" "),a("li",[t._v("未定义  undefined")]),t._v(" "),a("li",[t._v("布尔值  boolean")]),t._v(" "),a("li",[t._v("字符串  string")]),t._v(" "),a("li",[t._v("数值    number")]),t._v(" "),a("li",[t._v("对象和null object")]),t._v(" "),a("li",[t._v("函数    function")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined 定义一个变量 没有赋值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Null 赋值一个空对象指针")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用法 只要意在保存对象的变量还没有真正保存对象 就用null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 都是只有一个值的数据类型")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Boolean 数据类型转换")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据类型        转换成true       转换成false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean          true              false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String           非空              空字符串('')")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number           非零(包括无穷大)   0和NaN")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Null             任何对象           null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Undefined        没有               Undefined")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Number\n"),a("ul",[a("li",[t._v("NaN 非数字的特殊值")]),t._v(" "),a("li",[t._v("特点 任何NaN的操作都返回NaN,NaN与任何值都不相等 包括自己")]),t._v(" "),a("li",[t._v("isNaN() 将接收的值转换成数值 能返回fasle 否则true")])])]),t._v(" "),a("li",[t._v("转换方式\n"),a("ul",[a("li",[t._v("Number()适应任何类型")]),t._v(" "),a("li",[t._v("parseInt() 把不同进制的数值(第二个参数,是进制)转换成整数数值\n"),a("ul",[a("li",[t._v("第二个参数 是转换成进制 若转换不了 就返回NAN 默认是10  parseInt(num,1)=>NAN  parseInt(num,2)=>2进制的num转换成整数")])])]),t._v(" "),a("li",[t._v("ParseFloat()")])])]),t._v(" "),a("li",[t._v("Number转换")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean值 true/1 false/0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// null  0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '001' => 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   ''(空) => 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   'asd' => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '123aaa' => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     调用valueOf() 和toString()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ParseInt转换 (第二个参数是进制  默认是10)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '0001'=> 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '123aaa' => 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '' => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '22.5' => 22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ParseFloat(没有第二个参数)转换 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   '1.22.33' => 1.22")]),t._v("\n")])])]),a("ul",[a("li",[t._v("String\n"),a("ul",[a("li",[t._v("字符串的特点 一旦被创建 他们的值就不变 要是改变的话 原来的字符串要被销毁 然后再用新字段填充")]),t._v(" "),a("li",[t._v("转换方式")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString() 返回对应字符串的表现(数值 布尔 对象 字符串),可以传递(2,8,16进制)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   null 和 undefined 没有这个方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   (10).toString(2)  => 1010,toString传入2将数值转换成2进制的数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   parseInt(1010,2) => 10,parseInt第二个参数传2,就说明把一个二进制的数转换成整数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   啥都可以转换(null和undefined 没有toString 但是可以用String进行转换)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   如果值有toString 则调用")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   String(null)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   值是null 返回 'null' undefined 返回 'undefined'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("object\n"),a("ul",[a("li",[t._v("每个对象都有的方法")]),t._v(" "),a("li",[t._v("constructor 保存创建当前对象的函数")]),t._v(" "),a("li",[t._v("hasOwnProperty(propertyName) 检查属性在对象实例中(而不是原型链中)")]),t._v(" "),a("li",[t._v("toLocaleString() 返回对象的字符串表示 与执行环境有关系")]),t._v(" "),a("li",[t._v("toString()")]),t._v(" "),a("li",[t._v("ValueOf()")]),t._v(" "),a("li",[t._v("in 操作符 对象的属性  不管是实例中还是原型中 ('name' in person)")]),t._v(" "),a("li",[t._v("Object.keys(obj),for in 都是用来遍历对象的key(可枚举)")])])])]),t._v(" "),a("h2",{attrs:{id:"二进制操作符号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制操作符号","aria-hidden":"true"}},[t._v("#")]),t._v(" 二进制操作符号")]),t._v(" "),a("ul",[a("li",[t._v("二进制码:就是二进制数")]),t._v(" "),a("li",[t._v("二进制反码:将二进制的0取1,1取0")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按位非~ ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   计算规则:操作数的负数减一")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     将1(这里叫：原码)转二进制 ＝ 00000001")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     按位取反 ＝ 11111110")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     发现符号位(即最高位)为1(表示负数)，将除符号位之外的其他数字取反 ＝ 10000001")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     末位加1取其补码 ＝ 10000010")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     转换回十进制 ＝ -2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按位与(&)  ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     计算规则:操作数二进制对齐 都是1返回1 其他返回0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     010&101=>000")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按位或(|)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     计算规则:操作数二进制对齐 只要是1返回1 都是0返回0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     0110|1001 => 1111")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按位异或(^)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     计算规则:操作数二进制对齐 只要有一个1就返回1 (00 11)都返回0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     (用法:1和0对取)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     1^1 =>0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     0^1 =>1")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 左移(<<)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     计算规则:所有操作数向左边移动指定的位数(不影响符号)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     3<<2  => 12 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 右移")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     有符号,保留符号(>>)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       计算规则:所有操作数向右边边移动指定的位数(与左移相反)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     没符号,不保留符号(>>>)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       (64)>>>5 => 2 这个正常")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       (-64)>>>5 => 13427726 这个数很大  因为负数的二进制码 当整数的二进制码  一起移动(包括最高位的1)")]),t._v("\n  \n")])])]),a("ul",[a("li",[t._v("布尔值\n"),a("ul",[a("li",[t._v("逻辑非!\n"),a("ul",[a("li",[t._v("!false => true")]),t._v(" "),a("li",[t._v("!0 => true")])])]),t._v(" "),a("li",[t._v("逻辑与&&\n"),a("ul",[a("li",[t._v("属于短路操作(重点),第一个值能决定就不会执行第二个值(第一个值是false 就不会执行第二个值)")]),t._v(" "),a("li",[t._v("true && false => false")])])]),t._v(" "),a("li",[t._v("逻辑或||\n"),a("ul",[a("li",[t._v("有一个为true即返回true,同样是一个短路操作 第一个参数为true后面不会执行")])])])])])]),t._v(" "),a("h2",{attrs:{id:"一元操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一元操作符","aria-hidden":"true"}},[t._v("#")]),t._v(" 一元操作符")]),t._v(" "),a("ul",[a("li",[t._v("+(- 同理) 对应非数字会像Number()一样对值进行转换\n"),a("ul",[a("li",[t._v("+'01' => 1")]),t._v(" "),a("li",[a("ul",[a("li",[t._v("'z' => NaN")])])]),t._v(" "),a("li",[t._v("加法如果有一个操作数是字符串\n"),a("ul",[a("li",[t._v("2个都是 就拼接起来")]),t._v(" "),a("li",[t._v("只有一个 将另一个转换成字符串在拼接")])])]),t._v(" "),a("li",[t._v("如果 是别的类型则调toString和valueOf 对于undefined和null 调用String")])])]),t._v(" "),a("li",[t._v("逗号操作符 返回最后一个\n"),a("ul",[a("li",[t._v("var num = (1,2,3,4) //num==4")])])]),t._v(" "),a("li",[t._v("if() 里面都会调用Boolean()转换")]),t._v(" "),a("li",[t._v("do{}while() 语句至少会执行一次")]),t._v(" "),a("li",[t._v("while(){}")]),t._v(" "),a("li",[t._v("for in 用来枚举对象的属性")]),t._v(" "),a("li",[t._v("label 语句在代码中添加标签(多个for循环用)\n"),a("ul",[a("li",[t._v("break 退出后面的循环")]),t._v(" "),a("li",[t._v("continue 退出当前循环")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outermost:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// for(let i=0;i<10;i++){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for(let j=0;j<10;j++){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       if(i==5&&j==5){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         break outermost,//(55)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         // continue outermost,//(95)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       num++")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   } ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(num)")]),t._v("\n")])])]),a("ul",[a("li",[t._v("with(){} 将代码的作用域 设置到一个特定的对象中")]),t._v(" "),a("li",[t._v("switch 语句")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// switch(i){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   case '2':")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     // 合并使用(一般备注下)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   case '3':")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     console.log('3 or 2')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     break;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     // case值可以是表达式")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   case '4'+'5':")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     console.log('4'+'5')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     break;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   default:")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     break;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),a("ul",[a("li",[t._v("函数的参数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function fn(num1,num2){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fn(1,2)")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当fn有传递值的情况下 num1,num2 和arguments 值永远保持同步")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当fn没有给值的时候 num1,num2 就是undefined,arguments为空没有值  修改任意一个 他们值不同步")]),t._v("\n")])])]),a("h2",{attrs:{id:"变量作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量作用域")]),t._v(" "),a("ul",[a("li",[t._v("检查类型")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// typeof 一般用来检查 基本数据类型(最佳的工具)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   未定义  undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   布尔值  boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   字符串  string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   数值    number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   对象和null object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   函数    function")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象(instanceof)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   obj instanceof Object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Array.isArray(arr)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   if(value instanceof Array)// 需要环境")]),t._v("\n")])])]),a("ul",[a("li",[t._v("执行环境定义了变量或函数有权访问其他数据,决定了他们各自的行为,每个执行环境都有一个关联的变量对象")]),t._v(" "),a("li",[t._v("在web中,全局执行环境认为是window对象，某个环境中的所有代码执行完成后,该环境被销毁,其中所有变量等 都销毁,全局执行环境直到浏览器关闭才销毁")]),t._v(" "),a("li",[t._v("作用域当前访问的权限")]),t._v(" "),a("li",[t._v("作用域链保证了对执行环境有权访问所有变量和函数的有序访问")]),t._v(" "),a("li",[t._v("作用域在创建的时候 就确定了 不是在执行的时候确定的")])]),t._v(" "),a("h3",{attrs:{id:"延迟作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟作用域链","aria-hidden":"true"}},[t._v("#")]),t._v(" 延迟作用域链")]),t._v(" "),a("ul",[a("li",[t._v("try-catch 他会创建一个新的变量对象")]),t._v(" "),a("li",[t._v("with语句 会将执行对象添加到作用域链中")]),t._v(" "),a("li",[t._v("这两个语句都会在作用域链的前端添加一个变量对象")])]),t._v(" "),a("h3",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明","aria-hidden":"true"}},[t._v("#")]),t._v(" 变量声明")]),t._v(" "),a("ul",[a("li",[t._v("使用var 声明的变量会自动被添加到最近的环境中,在函数中就是当前函数的局部环境")]),t._v(" "),a("li",[t._v("如果不使用var 则被加到全局环境中")])]),t._v(" "),a("h2",{attrs:{id:"引用类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),a("h3",{attrs:{id:"创建对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、let obj = new Object()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、person={")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     name:'sg'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   person.name/person['name']")]),t._v("\n")])])]),a("h3",{attrs:{id:"创建数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建数组")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、var colors = new Array(20)// 20 代表的是创建length =20的数组 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、var colors = new Array(['red','blue'])")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 利用length属性对数组进行增删")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var colors = new Array('red','blue')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   colors.length = 1 // blue就会被删除掉")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   colors.length = 2 // ['red','undefined']")]),t._v("\n")])])]),a("ul",[a("li",[t._v("转换方法\n"),a("ul",[a("li",[t._v("toSting()会返回由数组中每个值的字符串形式拼接而成的一个逗号分隔的字符串")]),t._v(" "),a("li",[t._v("也等同 join(',')方法 (join 接收undefined 或者空 和接收',' 是一样的,如果是null 就不一样了)")]),t._v(" "),a("li",[t._v("var c = ['red','blue']; c.toString() //red,blue")]),t._v(" "),a("li",[t._v("valueOf() 同样返回数组本身")]),t._v(" "),a("li",[t._v("alert(c)  同样结论,alert要接收字符串参数 默认会调用toString")])])]),t._v(" "),a("li",[t._v("数组方法\n"),a("ul",[a("li",[t._v("栈方法(后进先出)\n"),a("ul",[a("li",[t._v("push 将参数逐个添加到数组末尾,修改数组长度")]),t._v(" "),a("li",[t._v("pop  删除末尾最后一项 减少length")])])]),t._v(" "),a("li",[t._v("队列方法(先进先出)\n"),a("ul",[a("li",[t._v("shift")]),t._v(" "),a("li",[t._v("unshift")])])]),t._v(" "),a("li",[t._v("重排序方法\n"),a("ul",[a("li",[t._v("reverse 倒序")]),t._v(" "),a("li",[t._v("sort\n"),a("ul",[a("li",[t._v("sort((a,b)=>a-b) 返回负值位子不变,返回正值调换位子,返回0位子不变(第一个值位于第二个值前面 返回负数 第二个值位于第一个值前面返回正数)")])])])])]),t._v(" "),a("li",[t._v("操作方法\n"),a("ul",[a("li",[t._v("concat 连接 返回新的数组 原数组不变")]),t._v(" "),a("li",[t._v("slice('startNumber','endNumber') 包前不包后 返回新的数组 原数组不变")]),t._v(" "),a("li",[t._v("splice\n"),a("ul",[a("li",[t._v("删除 (0,2)从第0项开始 删除2个")]),t._v(" "),a("li",[t._v("插入 (2,0,'item','item1') 第二项开始,删除0个,插入item和item1")]),t._v(" "),a("li",[t._v("返回删除后的内容  原数组变化")])])])])]),t._v(" "),a("li",[t._v("位置方法\n"),a("ul",[a("li",[t._v("indexOf()和lastIndexOf()")]),t._v(" "),a("li",[t._v("返回查找到的项在数组中的位置,没有查找到就返回-1,查找会用全等去比较")]),t._v(" "),a("li",[t._v("第一个参数是要查找的值  第二个参数是查找的起始位置")])])]),t._v(" "),a("li",[t._v("迭代方法\n"),a("ul",[a("li",[t._v("every")]),t._v(" "),a("li",[t._v("some")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" everyRs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("every")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arrary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" someRs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arrary")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("filter"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" filterRs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("forEach"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//执行某些操作})")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("map"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" mapRs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),a("li",[t._v("归并方法\nreduce&&reduceRight\n他们接收4个参数:前一项,当前项,索引,数组对象"),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("pre"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("cur"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("index"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//若传递了第二个参数 即index从0开始 pre就是第一个  否则从1开始 cur就是第一个")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])])])]),t._v(" "),a("h3",{attrs:{id:"date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#date","aria-hidden":"true"}},[t._v("#")]),t._v(" Date")]),t._v(" "),a("ul",[a("li",[t._v("Date.parse() 接收的是字符串不能是number")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  月/日/年 => 6/13/2004")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  2004-05-25T00:00:00 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  Date.parse('日期')这个等同于new Date('日期')")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Date.UTC()")]),t._v(" "),a("li",[t._v("Date.UTC(年,月，日，时，分，秒) 表示返回当前的毫秒数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 参数  返回时间戳")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  年分,基于0月开始(0是一月,1是二月),小时基于0到23 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  年月是必须的")]),t._v("\n")])])]),a("ul",[a("li",[t._v("new Date 接收的参数与Date.UTC 一样")]),t._v(" "),a("li",[t._v("Date.now() 表示返回当前的毫秒数 ，返回的都是毫秒数")]),t._v(" "),a("li",[t._v("toLocaleString,toString,valueOf方法")]),t._v(" "),a("li",[t._v("toLocaleString 和toString大致一样的效果 返回时间")]),t._v(" "),a("li",[t._v("valueOf方法 返回日期的毫秒数 可以用操作符来比较日期值")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var date1 = new Date(2007,0,1)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var date2 = new Date(2007,1,1)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// alert(date1>date2) // false")]),t._v("\n")])])]),a("ul",[a("li",[t._v("日期格式化")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toDateString 显示星期几、月、日、年")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toTimeString 时分秒和时区")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toUTCString 实现格式化完整的UTC日期")]),t._v("\n")])])]),a("ul",[a("li",[t._v("方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getTime/setTime  同valueOf 返回毫秒数/设置毫秒数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getFullYear/setFullYear 取得4位数的年份")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getMonth/setMonth 设置月份0开始 11表示十二月/设置超过11则增加年份")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getDate/setDate  设置日1开始 / 设置超过31则增加月份")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getDay/setDay 设置星期几")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getHours/setHours 返回日期的小时数0-23")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getMinutes/setMinutes 返回分0-59 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getSeconds/setSeconds 返回秒")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getTimezoneOffset 返回本地时间与UTC时间相差分钟数")]),t._v("\n")])])]),a("h3",{attrs:{id:"正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),a("ul",[a("li",[t._v("创建")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var pattern1 = /cat/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var pattern2 = new RegExp('cat','g')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注意给RegExp 传递的是字符串,需要对特殊字符进行双重转义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//               new 对象里面传递的是字符串  直接写不是字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   字面量模式         等价的字符串(即用RegExp创建的参数)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// /\\[bc\\]at/  =>  "\\\\[bc\\\\]at"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// /\\d.\\d{1,2}/  =>  "\\\\d.\\\\d{1,2}"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// /\\\\hello/   => '\\\\\\\\hello'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let path = '/user/:uid/:name';")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let reg1 = /\\:\\w+/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   console.log(reg.source) => \\:\\w+")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// // 这里注意 \\\\w  我们要他的\\  里所有的第一个\\代表转义 最终我们要得到(\\w) 所以就是\\\\  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let reg2 = new RegExp('\\:\\\\w+', 'g')")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let name = '/user/:uid/:name'.match(reg)")]),t._v("\n")])])]),a("ul",[a("li",[t._v("标志\n"),a("ul",[a("li",[t._v("g:表示应用所有字符串,而非在发现第一个匹配后立即停止")]),t._v(" "),a("li",[t._v("i:表示不区分大小写")]),t._v(" "),a("li",[t._v("m:表示多行模式,即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项")])])]),t._v(" "),a("li",[t._v("元字符\n"),a("ul",[a("li",[t._v("所有的元字符都需要转义")])])]),t._v(" "),a("li",[t._v("实例属性")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// global 布尔值,表示是否设置了g标志")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ignoreCase 布尔值,表示是否设置了i标志")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lastIndex 整数,表示开始搜索下一个匹配项的字符位置,从0开始(带g才有效果 不然每次都是从头开始)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// multiline 布尔值 表示是否设置了m表示")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// source 正则表达式的字符串表示")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var pattern = /\\[bc\\]at/i;")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.lo(pattern.global) => false")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.lo(pattern.ignoreCase) => true")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.lo(pattern.multiline) => false ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.lo(pattern.lastIndex) => 0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// console.lo(pattern.source) => "\\[bc\\]at"')]),t._v("\n")])])]),a("ul",[a("li",[t._v("实例方法")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// exec 接收一个字符串参数 返回匹配的内容，或者没有匹配项情况下返回null")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回的是array实例,记住不能随便加空格,没有捕获组则该数组只包含一项,捕获组就是中括号")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   index 表示匹配项在字符串中的位置")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   input 正则表达式的字符串")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     let text = "mom and dad and bady"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var p = /mom( and dad (and bady)?)?/gi")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var p1 = /nd/gi")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var ma = p.exec(text)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若是不加g他每次只返回一个匹配项,每次调用exec则都会在字符串中继续查找新的匹配项索引的第一个就是匹配到的值")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 若正则匹配项里面加()(即捕获组)则匹配所有满足的  如果带g他的index会有变化")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test 接收一个字符串参数 匹配到内容就返回true 否则就fasle")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   toString方法 ")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   RegExp 和 字面量创建的 toString方法都返回正则表达式的字面量")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// valueOf 返回正则表达式的本身 是一个对象")]),t._v("\n")])])]),a("ul",[a("li",[t._v("静态属性 (基于最近一次正则表达式操作而变化)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// RegExp 上的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// $n n代表()内匹配数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// input($_) 最近一次要匹配的字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lastMatch($&) 最近一次匹配的结果")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lastParent($+) 最近一次匹配的捕获组")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// leftContext($`) 匹配结果之前的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// rightContext($') 匹配结果之后的数据")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// multiline($*) 布尔 表示是否所有表达式都使用多行模式")]),t._v("\n")])])]),a("h3",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("ul",[a("li",[t._v("内部属性")]),t._v(" "),a("li",[t._v("this 看执行环境")]),t._v(" "),a("li",[t._v("caller 这个是属性保存着调用当前函数的引用")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function outer(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   inner() ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function inner(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   alert(inner.caller)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   //console.log(arguments.callee.caller)")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outer()")]),t._v("\n")])])]),a("ul",[a("li",[t._v("arguments 类数组 包含传入函数中所有的参数")]),t._v(" "),a("li",[t._v("arguments.callee callee是一个指针 指向拥有这个arguments对象的函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    retrun "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("factorial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 或者argumeng.callee(num-1)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])])]),a("ul",[a("li",[t._v("函数的属性\n"),a("ul",[a("li",[t._v("length 表示函数希望接收的命名参数的个数")]),t._v(" "),a("li",[t._v("prototype 属性不可枚举")]),t._v(" "),a("li",[t._v("call/apply/bind")]),t._v(" "),a("li",[t._v("阶乘 arguments.callee代表的当前的行数")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function factorial(num){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   if(num<=1){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return 1;")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }else{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return num*arguments.callee(num-1)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Number")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 (四舍五入)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toFixed(num)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// let rs = 10 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(rs.toFixed(2))//10.00")]),t._v("\n")])])]),a("ul",[a("li",[t._v("string")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 访问字符串中特定的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   charAt()/charCodeAt() 都接收一个参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   或者 用中括号加数字")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 操作方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   concat() 连接 可接受多个参数 进行拼接")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   slice/substr/substring")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     slice和substring 2个参数起始位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     substr 开始位子和个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     负值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       slice会将负值与字符串长度相加")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       substr 第一个加长度 第二个转换为0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       substring 负值变成0 然后 0和领一个数值换位子 从小到大")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     返回操作后的数字 原不变,若第二个不传 则将字符串末尾作为结束位置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   trim 删除前置及后缀的所有空格,然后返回结果,原数组不变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     非标准trimLeft和trimRight")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   toLowerCase(转换成小写)和toUpperCase(转换成大写)/toLocalLowerCase和toLacalCase(针对特定的地区实现)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   localeCompare 比较2个字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     如果字符串在字母表中应该排在字符串参数之前,返回负数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     如果字符串等于另一个字符串,返回负数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     如果字符串在字母表中应该排在字符串参数之后,返回正数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   indexOf('') lastIndexOf('') 查找返回字符的索引 第二个参数从哪个位子开始找")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 字符串匹配的方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   match")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     与exec参数啥都一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     区别 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       match带g将匹配到的数组放在数组内返回(带不带捕获组都一样)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       exec带g只是index会有变化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   search")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   replace(字符串/正则,字符串/函数)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     var text = "cat,bat,sat,fat"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     var rs = text.repalce("at","ond")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     // "cond,bat,sat,fat"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     var rs = text.repalce(/at/g,"ond")')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//     // "cond,bond,sond,fond"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   参数 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     第一个参数:字符串或者正则")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     第二个参数:字符串或者函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         函数参数说明")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           参一 要匹配的内容,与replace的第一个参数一样")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           参二 要匹配的内容对应的位子下标(如果有使用()分组 就返回分组的值,对应的下标就到参数三或者往后排)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           参三 原字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           注意:这个函数必须要有一个返回值,否则的话它就会拿undefined替换掉原来的内容")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   返回:替换后的新字符串,原来的字符串没有变化")]),t._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   例子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       let str = '123wqeqw123qweqq3232we'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       let r = /(\\d+)\\w/g")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       let rs = str.replace(r,(r1,r2,r3)=>{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         console.log('=====',r1,r2,r3)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       })")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   正则表达式 字符串内有一些特殊的字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     他们是RegExp 对象上的静态方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     $$  $")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     $&  匹配模式的子字符串 与RegExp.lastMatch 的值相同 (lastMatch 最后匹配的值)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//       你不能使用属性访问器(RegExp.$&)来使用简写的别名，因为解析器在这里会将 "&" 看做表达式，并抛出 SyntaxError 。使用 方括号符号来访问属性。')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     $n  匹配第n个捕获组的子字符串 n(0-9),如果正则表达式没有定义捕获组 则使用空字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     $nn 匹配第nn个捕获组的子字符串 nn(00-99)")]),t._v("\n")])])]),a("h2",{attrs:{id:"global对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#global对象","aria-hidden":"true"}},[t._v("#")]),t._v(" Global对象")]),t._v(" "),a("ul",[a("li",[t._v("URI")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  encodeURI 和 decodeURI 对URI进行编译 有效的URI不能包括空格  而他们就是对空格进行编码和解析(他会对% 空格 等进行转义)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  encodeURIComponent 和 decodeURIComponent 则对任何非标准字符串进行编码")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// var uri = "http://www.baidu.com/a b";')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(encodeURI(uri)) // http://www.baidu.com/a%20b ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(encodeURIComponent(uri)) // http%3A%2F%2Fwww.baidu.com/a%20b ")]),t._v("\n")])])]),a("ul",[a("li",[t._v("eval 是一个js解析器 接收一个参数 即要执行的js字符串")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eval(\"alert('hi')\")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// eval 中创建的任何变量或函数都不会被提升")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但是在strict严格模式下 eval不能被赋值 && 外部访问不到eval中创建的任何变量")]),t._v("\n")])])]),a("ul",[a("li",[t._v("对象的属性")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined/NaN/infinity  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object/Array/Date/Error/RegExp")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Boolean")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Function ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// js明确禁止给 undefined/NaN/infinity 赋值")]),t._v("\n")])])]),a("ul",[a("li",[t._v("Math")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// min&&max 方法用于确定一组数值的最大值和最小值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var max = Math.max(3,5,1,22)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   console.log(max) // 22")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 借助 apply")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var values = [3,5,1,22]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var max = Math.max.apply(Math,apply)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 舍入方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Math.ceil(25.9) //26 向上舍入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Math.floor(25.1) //25 向下舍入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Math.round(25.9) //26 四舍五入")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// random方法 返回0到1之间的数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   //获取2个数之间的任意数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function selectFrom(lowerValue,upperValue){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     let choices = upperValue - lowerValue")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return Math.floor(Math.random()*choices + lowerValue)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   selectFrom(2,10)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   //这个函数很有用 可以在数组中随机取一项")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   let arr = ['red','green','blue','black']")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var color = arr[selectFrom(0,arr.length-1)]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("面向对象\n"),a("ul",[a("li",[t._v("属性类型:数据类型和访问属性")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     configurable 表示能否通过delete 删除 默认是true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Enumerable 表示能否通过for-in循环 默认true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Writable 表示能否修改属性的值 默认true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Value 读写都要经过这儿 默认是undefined")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   要修改属性的默认特征 必须用Object.defineProperty ('属性所在的对象','属性的名字','一个描述符对象')方法, 描述符即上面数据属性(可设置一个或者多个)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   configurable 值一旦被修改成 false 就不能在设置true 会报错的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   如果通过 Object.defineProperty 创建的新属性 如果不指定的情况下 configurable Enumerable Writable 都是false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问器属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   不包含数据值 也就是上面的value,它包含getter和setter")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   特征")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     configurable 表示能否通过delete 删除 默认是true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Enumerable 表示能否通过for-in循环 默认true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     get 读取值调用的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     set 设置值调用的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var book = {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       _year:2004,")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       edition:1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Object.defineProperty(book,'year',{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       get:function(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         return this._year")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       },")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       set:function(val){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         if(val > 2004){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           this._year = val")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//           this.edition + = val-2004")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     })")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     book.year = 2005")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     console.log(book.edition)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Object.defineProperties('对象',{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   'key1':{},")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   'key2':{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// })")]),t._v("\n")])])]),a("ul",[a("li",[t._v("读取属性特征\n"),a("ul",[a("li",[t._v("Object.getOwnPropertyDescriptor('对象','属性') 可以获取属性的特征 也就是上面的配置")])])])]),t._v(" "),a("h2",{attrs:{id:"创建对象-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建对象-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 创建对象")]),t._v(" "),a("ul",[a("li",[t._v("new Object(null) 不会产生原型链，{} 会产生")]),t._v(" "),a("li",[t._v("1、字面量")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   let obj = new Object()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:产生大量重复的代码")]),t._v("\n")])])]),a("ul",[a("li",[t._v("2、工场模式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function createObj(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     let obj = new Object()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return obj")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   } ")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var a1 = createObj()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var a2 = createObj()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:没有解决对象识别问题(怎样知道一个对象的类型)")]),t._v("\n")])])]),a("ul",[a("li",[t._v("3、构造函数")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function Person(name){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.name = name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.sayName = ()=>{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   // this.sayName = ()=>{} 等同于 this.sayName = new Function()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var a1 = new Person('sg')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:每个方法都要再实例上面重新创建一次")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     可以修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     function Person(name){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       this.name = name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       this.sayName = fn")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     function fn(){}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点 每个实例确实只创建了一次fn 但是fn成了全局的了")]),t._v("\n")])])]),a("ul",[a("li",[t._v("4、原型模式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function Person(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.arr = []")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Person.prototype.name = 'sg'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Person.prototype.fn = ()=>{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:问题就是数据共存,SubType的实例都能都是拥有公共的arr")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型中的方法 (person 是 Person直接new出来的)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// __proto__ 指向 isPrototypeOf 方法的对象 返回true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Person.prototype.isPrototypeOf(person) //true/false")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Object.getPrototypeOf() 获取__proto__")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Object.getPrototypeOf(person) == Person.prototype")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象的constructor属性是用来标识对象类型的  判断实例是否是某构造函数直接生成")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   person.constructor")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象的所有实例 ")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   person instanceof Object // true")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   person instanceof Person // true")]),t._v("\n")])])]),a("ul",[a("li",[t._v("5、构造函数和原型模式组合")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function Person(name){")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       this.name = name")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Person.prototype = {")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     constructor:Person")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     sayName:function(){")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//         return this.name")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n")])])]),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承","aria-hidden":"true"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("ul",[a("li",[t._v("1、原型链")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function SuperType(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.arr = []")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function SubType(){}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   SubType.prototype = new SuperType()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:问题就是数据共存,SubType new出来的 实例都能都是拥有公共的arr")]),t._v("\n")])])]),a("ul",[a("li",[t._v("2、借用构造函数(call/apply)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function SuperType(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.arr = []")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function subType(){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     superType.call(this)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.fn = ()=>{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   缺点:方法在构造函数中 无法复用 每次都是重新创建")]),t._v("\n")])])]),a("ul",[a("li",[t._v("3、组合(借用构造函数和原型链)")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function SuperType(name){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.name = name")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.arr = []")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   SuperType.prototype.fn = ()=>{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   //继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function SubType(name){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     // 属性继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     SuperType.call(this,name)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     // 方法继承 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   SubType.prototype = new SuperType()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   SubType.prototype.constructor = SubType")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   SubType.prototype.fn1 = ()=>{}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   // 缺点 SuperType 会执行2次")]),t._v("\n")])])]),a("ul",[a("li",[t._v("4、原型式继承")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   条件 必须要有一个对象可以作为另一个对象的数据, 通过 Object.create() 函数 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       第一个是接受的对象 第二个是对对象属性的描述(与Object.defineProperties()第二个参数一样)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   let person = {")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     name:'sg',")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     age:18")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   // Object.create用法 可以接受2个参数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   let obj = Object.create(person,{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     name:{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       values:'xxx'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   })")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   使用场景  让一个对象跟另一个对象保持相似的情况下")]),t._v("\n")])])]),a("ul",[a("li",[t._v("5、寄生组合式继承")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function fn(subType,superType){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     var p = Object(subType.protoType)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     p.constructor = subType")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     subType.prototype = p")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function Super(){}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   S.prototype.sayName = ()=>{}")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   function Sub(name,age){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     Super.call(this)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     this.age = age")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   // 将原型挂载上去")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   p(Sub,Super)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   Sub.prototype.fn1 = ()=>{}")]),t._v("\n")])])]),a("h2",{attrs:{id:"函数-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数-2","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),a("ul",[a("li",[t._v("有两种方式定义:函数声明和函数表达式\n"),a("ul",[a("li",[t._v("函数声明 特征 函数声明提升(函数表达式不会)")])])]),t._v(" "),a("li",[t._v("递归\n"),a("ul",[a("li",[t._v("这种情况下要回调函数自身,如果是匿名函数可以通过 arguments.callee(指向的就是当前函数),严格模式下报错,可以用函数表达式")])])])]),t._v(" "),a("h2",{attrs:{id:"闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#闭包","aria-hidden":"true"}},[t._v("#")]),t._v(" 闭包")]),t._v(" "),a("ul",[a("li",[t._v("定义:指有权访问另一个函数作用域的变量的函数")])]),t._v(" "),a("h2",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this","aria-hidden":"true"}},[t._v("#")]),t._v(" this")]),t._v(" "),a("ul",[a("li",[t._v("this对象是在运行时基于函数的执行环境绑定,但是匿名函数的执行环境具有全局性,指向的是window")]),t._v(" "),a("li",[t._v("例子 非严格模式下")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1、  var name = 'the window'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   var obj = {")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     name:'my obj'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     fn:function(){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       return this.name")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   obj.fn() //'my obj'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   obj.fn = obj.fn //'the window'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2、var name = 'the window'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// var obj = {")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   name : 'my obj',")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   fn:function(){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     return function(){")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       return this.name")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj.fn()() //the window  ")]),t._v("\n")])])]),a("h2",{attrs:{id:"window"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#window","aria-hidden":"true"}},[t._v("#")]),t._v(" window")]),t._v(" "),a("ul",[a("li",[t._v("它作为全局对象的根 所有的全局变量和方法都放在他下面")]),t._v(" "),a("li",[t._v("delete")])]),t._v(" "),a("blockquote",[a("p",[t._v("能删除 window.a = 'xx'(或者 a = 'xx') ;delete window.a  a=>undefined  因为window 属性有个[[configurable]] 为false\n但是不能删除 var a = '1'; delete window.a  a=>1")])]),t._v(" "),a("ul",[a("li",[t._v("窗口位置")])]),t._v(" "),a("blockquote",[a("p",[t._v("screentX/screentY screentLeft/screentTop")])]),t._v(" "),a("ul",[a("li",[t._v("窗口大小")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outerHeight/outerWidth 浏览器所有的宽高(包括边框等能看到的东西)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// innerHeight/innerWidth 浏览器可视区的宽高")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window.open($1,$2,$3)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   $1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     url")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   $2 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     _blank - URL加载到一个新的窗口。这是默认")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     _parent - URL加载到父框架")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     _self - URL替换当前页面")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     _top - URL替换任何可加载的框架集")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     name - 窗口名称")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   $3 窗口的大小 当有值的时候 _blank 在新的页面中打开")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     height/width/top/left 等 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   注意 let w = window.open($1,$2,$3)  要将w.opener=null 因为新窗口的opener 指向当前window ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       a 标签也是也有问题 处理：添加noopener 属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       通过 window.opener.location = newURL 来修改原来网页的url    ")]),t._v("\n")])])]),a("ul",[a("li",[t._v("系统对话框")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// alert() 弹出框")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// confirm() 显示 确认 和 取消 有返回值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prompt() 显示 确认 和 取消 自带一个输入框 有返回值")]),t._v("\n")])])]),a("ul",[a("li",[t._v("location")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// window.location和document.location 应用的是同一个对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     hash      '#xxxx'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     host      'www.xxx.com:80'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     hostname  'wwww.xxx.com'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     href      'http://www.xxx.com'  完整的url  location.toString 也返回这个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     pathname  '/xxx/'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     port      '8080'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     protocol  'http:'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     search    '?q=x'    ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     操作 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       下面3个方法 都一样 跳转URL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       location.assign('xxxx')  window.location='xx'  location.href='xx' ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     以上操作 除了hash 其他的设置修改 都会触发浏览器的重新加载")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     以上所有操作都会产生一条记录  但是使用replace('只接受一个参数') 不会产生记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     location.reload() //重新加载 (可能走缓存) ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     location.reload(true) //重新加载 (从服务器重新加载) \\")]),t._v("\n")])])]),a("ul",[a("li",[t._v("navigator")]),t._v(" "),a("li",[t._v("记录浏览器的信息")]),t._v(" "),a("li",[t._v("1、检查插件 主要plugins 每个里面的name(IE不支持,书上有暂时不记录了)")]),t._v(" "),a("li",[t._v("navigator.plugins")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function hasPlugin(name){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   name = name.toLowerCase();")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   for(let i=0;i<navigator.plugins.length;i++){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     if(navigator.plugins[i].name.toLowerCase().indexOf(name)>-1){")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//       return true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//     }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// }")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hasPlugin('Flash')")]),t._v("\n")])])]),a("ul",[a("li",[t._v("2、浏览器信息")]),t._v(" "),a("li",[t._v("navigator.userAgent")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// screen 显示了一堆浏览器的数据(具体看书)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// history 书上介绍的少")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   length 属性保存着历史记录  设置为0  即情况历史记录")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   go('xx') 页面跳转")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   back()   向后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   forward()向前")]),t._v("\n")])])]),a("h2",{attrs:{id:"dom"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM")]),t._v(" "),a("ul",[a("li",[t._v("html 元素通过元素节点来表示,节点类型一起12个")]),t._v(" "),a("li",[t._v("dom.nodeType(1 元素, 2属性, 3 文本,8 注释,9 跟节点)")]),t._v(" "),a("li",[t._v("dom.nodeName 元素的标签名 只有元素节点才有")])]),t._v(" "),a("h3",{attrs:{id:"节点关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点关系","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点关系")]),t._v(" "),a("ul",[a("li",[t._v("dom.parentNode")]),t._v(" "),a("li",[t._v("dom.childNodes")]),t._v(" "),a("li",[t._v("dom.previousSibling")]),t._v(" "),a("li",[t._v("dom.nextSibling")]),t._v(" "),a("li",[t._v("dom.firstChild")]),t._v(" "),a("li",[t._v("dom.lastChild  (父元素下的第一个节点(节点和元素 是2个东西)")]),t._v(" "),a("li",[t._v("dom.ownerDocument (指向当前的document(每个节点都有))")])]),t._v(" "),a("h3",{attrs:{id:"节点操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#节点操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 节点操作")]),t._v(" "),a("ul",[a("li",[t._v("parentNode.appendChild(node)  往父节点内插入一个节点")]),t._v(" "),a("li",[t._v("parentNode.insertBefore(node,flagNode) 一个参数 插入到第二个 目标元素 之前(若为空 效果等同于appendChild,必须有2个参数)")]),t._v(" "),a("li",[t._v("parentNode.replaceChild(node1,node2) 第一个节点 替换 第二个节点")]),t._v(" "),a("li",[t._v("parentNode.removeChild('node') 要移除那个节点")]),t._v(" "),a("li",[t._v("以上4个操作 都是在父节点下使用,同时必须要有子节点,否则会报错(文本节点就不行)")]),t._v(" "),a("li",[t._v("clone(false) 浅拷贝\n"),a("ul",[a("li",[t._v("clone(true) 浅拷贝  拷贝的时候要注意id")])])])]),t._v(" "),a("h3",{attrs:{id:"document"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document","aria-hidden":"true"}},[t._v("#")]),t._v(" document")]),t._v(" "),a("ul",[a("li",[t._v("body 属性 直接指向document.body")]),t._v(" "),a("li",[t._v("doctype 属性来访问 <!DOCTYPE html> 实体")]),t._v(" "),a("li",[t._v("URL  === location.href 获取完整的url")]),t._v(" "),a("li",[t._v("domain === location.hostname 获取域名")]),t._v(" "),a("li",[t._v("referrer 获取来源页面的URL")]),t._v(" "),a("li",[t._v("特例:\n"),a("ul",[a("li",[t._v("document.domain 阔以处理同不同页面  共同主域的页面跨域")])])]),t._v(" "),a("li",[t._v("1、以上只有domain 可以设置值 由于跨域的考虑 只能设置URL 包含的域\n"),a("ul",[a("li",[t._v("(例如 url: p2p.xx.com(紧绷型)  => 只能设置成xx.com(松散型))")])])]),t._v(" "),a("li",[t._v("2、domain 一开始是松散型 就不能设置成紧绷型 过来阔以")])]),t._v(" "),a("h3",{attrs:{id:"查找元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找元素","aria-hidden":"true"}},[t._v("#")]),t._v(" 查找元素")]),t._v(" "),a("ul",[a("li",[t._v("getElementById()  id区别大小写")]),t._v(" "),a("li",[t._v("getElementsByTagName('标签名或者*') 标签名不区分大小写 * 是匹配所有的标签(html标签也会返回,按顺序放在数组内) 动态获取的(随着标签变化)")]),t._v(" "),a("li",[t._v("getElementsByName('xss') 获取name值是xss 的节点")]),t._v(" "),a("li",[t._v("特例\n"),a("ul",[a("li",[t._v("document.anchors 所有带name特性的 a标签")]),t._v(" "),a("li",[t._v("document.forms === document.getElementByTagName('form')")]),t._v(" "),a("li",[t._v("document.images === document.getElementByTagName('img')")]),t._v(" "),a("li",[t._v("document.links 所有带 href的 a标签")]),t._v(" "),a("li",[t._v("写入")]),t._v(" "),a("li",[t._v("write()/writeln()  都接收一个字符串 后者会默认添加一个\\n\n"),a("ul",[a("li",[t._v("还阔以 动态写入 script 标签")])])]),t._v(" "),a("li",[t._v("open()/close() 分别用于打开和关闭网页的流输出")])])])]),t._v(" "),a("h3",{attrs:{id:"element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#element","aria-hidden":"true"}},[t._v("#")]),t._v(" Element")]),t._v(" "),a("ul",[a("li",[t._v("属性 id/class/title/lang/dir")]),t._v(" "),a("li",[t._v("dir 值ltr(从左到右) rtl(从右到左)")]),t._v(" "),a("li",[t._v("getAttribute()  不区分大小写")])]),t._v(" "),a("blockquote",[a("p",[t._v("获取元素的属性  自定义的也可以\n另外 dom.属性 不能获取到自定义 也不区分大小写\n属性获取和getAttribute方法获取 两个特例会不同")])]),t._v(" "),a("blockquote",[a("p",[t._v("1、style 属性获取返回一个对象  方法获取会返回只返回内联样式设置的\n2、onclick 属性获取的是函数    方法获取的是一个onclick里面的字符串")])]),t._v(" "),a("ul",[a("li",[t._v("setAttribute()")])]),t._v(" "),a("blockquote",[a("p",[t._v("设置属性 属性或者setAttribute 增加的自定义属性 双方都不能获取到\n方法设置的属性 会显示在html 结构中,属性增加的不会\n方法设置的 不管大小写 都统一转成 小写")])]),t._v(" "),a("ul",[a("li",[t._v("removeAttribute()")]),t._v(" "),a("li",[t._v("删除属性")])]),t._v(" "),a("blockquote",[a("p",[t._v("attributes 获取元素所有的属性 返回的是一个集合\nnodeValue nodeName 某一个属性的 key和value\ncreateElement 方法创建一个元素  不区分大小写")])]),t._v(" "),a("h3",{attrs:{id:"文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本","aria-hidden":"true"}},[t._v("#")]),t._v(" 文本")]),t._v(" "),a("ul",[a("li",[t._v("appendData('zz') 将text添加到节点的末尾")]),t._v(" "),a("li",[t._v("deleteData(offset,count) 删除指定位子的 个数")]),t._v(" "),a("li",[t._v("insertData(offset,text)")]),t._v(" "),a("li",[t._v("replaceData(offset,count,text)")]),t._v(" "),a("li",[t._v("splitText(offset) 分隔文本节点")]),t._v(" "),a("li",[t._v("createTextNode 创建文本节点")])]),t._v(" "),a("h3",{attrs:{id:"动态脚本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态脚本","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态脚本")]),t._v(" "),a("ul",[a("li",[t._v("创建的脚本 阔以放到body也阔以放到head中")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" script "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"function sayHi(){alert('hi')}; sayHi()\"")]),t._v("\n  script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createTextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("appendChild")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"动态样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 动态样式")]),t._v(" "),a("blockquote",[a("p",[t._v("只有link和style标签能够把css样式包含到html中\n必须将link标签添加到head中而不是body\n加载外部样式文件的过程是异步的")])]),t._v(" "),a("h3",{attrs:{id:"选择符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#选择符","aria-hidden":"true"}},[t._v("#")]),t._v(" 选择符")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// document.querySelector('选择符') 静态获取的 不会随着元素多少而变化")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// document.querySelectorAll('选择符')")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// document.childElementCount 返回子元素的个数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// getElementsByClassName('') 传入class 返回目标元素 动态获取的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dom.classList 获取所有的class 是一个集合 同时阔以对他设置(传入的也是数组或者集合)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   他有一系列操作方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   add(value) 添加列表中 值存在了就不添加了")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   contains(value) 列表中是否存在")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   remove(value) 从列表中删除")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   toggle(value) 如果列表中有值就删除,没有就添加")]),t._v("\n")])])]),a("h3",{attrs:{id:"焦点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#焦点","aria-hidden":"true"}},[t._v("#")]),t._v(" 焦点")]),t._v(" "),a("ul",[a("li",[t._v("document.activeElement === 触发焦点的元素")])]),t._v(" "),a("h3",{attrs:{id:"readystate-属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#readystate-属性","aria-hidden":"true"}},[t._v("#")]),t._v(" readyState 属性")]),t._v(" "),a("blockquote",[a("p",[t._v("他来实现一个指示文档已经加载完成的指示器\nloading 正在加载文档\ncomplete 加载完文档完 配合onload 事件")])]),t._v(" "),a("h3",{attrs:{id:"浏览器模式-document-compatmode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器模式-document-compatmode","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器模式(document.compatMode)")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标准模式值 'CSS1Compat' (<!DOCTYPE html>)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 混杂模式 'BackCompat'")]),t._v("\n")])])]),a("h3",{attrs:{id:"标签自定义属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签自定义属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 标签自定义属性")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加 格式 data-xxx(data-开头)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 访问 dataset.xxx")]),t._v("\n")])])]),a("h3",{attrs:{id:"插入标记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入标记","aria-hidden":"true"}},[t._v("#")]),t._v(" 插入标记")]),t._v(" "),a("ul",[a("li",[t._v("innerHTML")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只读模式:返回元素所有的子节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 写模式:插入的内容 会覆盖原有的子节点")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入 script标签(暂时没有成功)")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 插入 style标签")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dom1.innerHTML = '<style type=\\\"text/css\">body{background-color:red}</style>'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("outerHTML\n"),a("ul",[a("li",[t._v("相对innerHTML 会把自身加上去")])])]),t._v(" "),a("li",[t._v("insertAdjacentHTML(位子,插入的文本)\n"),a("ul",[a("li",[t._v("beforebegin 在当前元素之前插入一个紧邻的同辈元素")]),t._v(" "),a("li",[t._v("afterbegin 在当前元素之下插入一个新的子元素")]),t._v(" "),a("li",[t._v("beforeend 在当前元素之下插入一个新的子元素")]),t._v(" "),a("li",[t._v("afterend 在当前元素之后插入一个紧邻的同辈元素")])])])]),t._v(" "),a("h3",{attrs:{id:"scrollintoview-作用于每一个元素"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scrollintoview-作用于每一个元素","aria-hidden":"true"}},[t._v("#")]),t._v(" scrollIntoView() 作用于每一个元素")]),t._v(" "),a("ul",[a("li",[t._v("可以让元素滑动 与浏览器顶部(true 默认)或者底部对齐(false) 聊天界面用它")]),t._v(" "),a("li",[t._v("dom1.scrollIntoView(false);")])]),t._v(" "),a("h3",{attrs:{id:"children-返回元素元素的子节点-文本会过滤掉"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#children-返回元素元素的子节点-文本会过滤掉","aria-hidden":"true"}},[t._v("#")]),t._v(" children 返回元素元素的子节点 文本会过滤掉")]),t._v(" "),a("ul",[a("li",[t._v("与childNodes比较(childNodes 什么节点都会返回 children只会返回元素的子节点)")])]),t._v(" "),a("h3",{attrs:{id:"contains-被检测的节点是后代子节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#contains-被检测的节点是后代子节点","aria-hidden":"true"}},[t._v("#")]),t._v(" contains() 被检测的节点是后代子节点")]),t._v(" "),a("ul",[a("li",[t._v("document.documentElement.contains(document.body)//true")])]),t._v(" "),a("h3",{attrs:{id:"comparedocumentposition-返回节点间的位子关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#comparedocumentposition-返回节点间的位子关系","aria-hidden":"true"}},[t._v("#")]),t._v(" compareDocumentPosition 返回节点间的位子关系")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1   无关")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2   居前 给定节点在DOM树中位于参考节点之前")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4   居后 给定节点在DOM树中位于参考节点之后")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 8   包含 给定节点是参考节点的祖先")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 16  被包含 给定节点是参考节点的后代")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 关系值阔以叠加(2 8,4 16 一般都是一类)")]),t._v("\n")])])]),a("h3",{attrs:{id:"插入文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#插入文本","aria-hidden":"true"}},[t._v("#")]),t._v(" 插入文本")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// innerText 包裹子文档树中的文本 读取时候 他会按照浅入深的顺序")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   写入值时,结果会删除元素的所有节点 插入节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// outerText 读取值的时候同上")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//   写入值时, 会把自己替换掉")]),t._v("\n")])])]),a("h2",{attrs:{id:"dom2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom2","aria-hidden":"true"}},[t._v("#")]),t._v(" DOM2")]),t._v(" "),a("h3",{attrs:{id:"style-变化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#style-变化","aria-hidden":"true"}},[t._v("#")]),t._v(" style 变化")]),t._v(" "),a("ul",[a("li",[t._v("dom.style 对象下面 有很多属性")]),t._v(" "),a("li",[t._v("不包含与外部样或者嵌入样式层叠表(只有js设置 和 style 有效)")]),t._v(" "),a("li",[t._v("访问元素 带-  变成驼峰大小写\n"),a("ul",[a("li",[t._v("dom.style.color")]),t._v(" "),a("li",[t._v("dom.style.backgroundImage")])])]),t._v(" "),a("li",[t._v("设置值的是 一般要给px(单位)")]),t._v(" "),a("li",[t._v("cssText 设置 访问style的css 值是字符串")]),t._v(" "),a("li",[t._v("length 属性是自己设置的style 属性值 阔以通过dom.style[i] 访问到属性")]),t._v(" "),a("li",[t._v("getPropertyValue 通过prop 获取value值")])]),t._v(" "),a("h3",{attrs:{id:"计算样式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#计算样式","aria-hidden":"true"}},[t._v("#")]),t._v(" 计算样式")]),t._v(" "),a("ul",[a("li",[t._v("document.defaultView.getComputedStyle(dom,null)")]),t._v(" "),a("li",[t._v("// 等同window.getComputedStyle(dom,null)")]),t._v(" "),a("li",[t._v("第二参数处理伪元素的 null即没有 若有可以设置为':after'等")]),t._v(" "),a("li",[t._v("获取元素最后的css 属性值 只读不支持修改")])]),t._v(" "),a("h3",{attrs:{id:"操作样式表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作样式表","aria-hidden":"true"}},[t._v("#")]),t._v(" 操作样式表")]),t._v(" "),a("ul",[a("li",[t._v("检查 知否支持 DOM2")]),t._v(" "),a("li",[t._v("document.implementation.hasFeature('styleSheets','2.0')")]),t._v(" "),a("li",[t._v("获取样式\n"),a("ul",[a("li",[t._v("document.styleSheets 集合获取所有的")]),t._v(" "),a("li",[t._v("styleDom.sheet  获取style的css属性")])])]),t._v(" "),a("li",[t._v("修改\n"),a("ul",[a("li",[t._v("直接对 styleDom.sheet 里面的值进行修改")])])]),t._v(" "),a("li",[t._v("创建\n"),a("ul",[a("li",[t._v("style.sheet.insertRule("),a("code",[t._v(".div{ color:blue}")]),t._v(")")])])]),t._v(" "),a("li",[t._v("删除\n"),a("ul",[a("li",[t._v("sheet.deleteRule(0)")])])])]),t._v(" "),a("h3",{attrs:{id:"元素大小"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元素大小","aria-hidden":"true"}},[t._v("#")]),t._v(" 元素大小")]),t._v(" "),a("ul",[a("li",[t._v("偏移量\n"),a("ul",[a("li",[t._v("offsetHeight:元素垂直方向上占用的空间大小（包括边框）")]),t._v(" "),a("li",[t._v("offsetWidth:元素水平方向上占用的空间大小（包括边框）")]),t._v(" "),a("li",[t._v("offsetLeft:与父级左边框之间的距离（getElementLeft() 值相同）")]),t._v(" "),a("li",[t._v("offsetTop:与父级右边框之间的距离（getElementTop() 值相同）")]),t._v(" "),a("li",[t._v("clientWidth/clientHeight(不含边框的宽高)")])])]),t._v(" "),a("li",[t._v("滚动大小(body自带滚动,元素要加overflow)\n"),a("ul",[a("li",[t._v("scrollHeight/scrollWidth 在没有滚动时 就等于元素本身,最小值就是元素本身,主要用来确定元素内容的大小\n"),a("ul",[a("li",[t._v("带滑动的页面，高度就是documentElement.scrollHeight")])])]),t._v(" "),a("li",[t._v("scrollLeft/scrollTop 被隐藏左右边的像素 可以设置值")])])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 延时处理 不然不生效  不加单位")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollTop  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'100'")]),t._v("\n  document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("documentElement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scrollLeft  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("dom.getBoundingClientRect() 获取元素的位子信息")])]),t._v(" "),a("h3",{attrs:{id:"遍历"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#遍历","aria-hidden":"true"}},[t._v("#")]),t._v(" 遍历")]),t._v(" "),a("ul",[a("li",[t._v("NodeIterator\n"),a("ul",[a("li",[t._v("document.createNodeIterator(root,whatToShow,filter,entityReferenceExpansion) 下面的遍历的用法 实际参数参考书籍")]),t._v(" "),a("li",[t._v("NodeIterator 类型中只要是 nextNode()和previousNode()进行遍历,他是深度优先遍历")])])])]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("div1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("122"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" world!"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("List item 1\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("1111111"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("List item 2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("List item 3"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token script"}},[a("span",{pre:!0,attrs:{class:"token language-javascript"}},[t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" dom "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#div1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("filter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FILTER_ACCEPT 显示当前的信息 ")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// FILTER_SKIP 过滤当前的信息")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tagName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'li'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" NodeFilter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FILTER_ACCEPT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("NodeFilter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("FILTER_SKIP")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createNodeIterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("NodeFilter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("SHOW_ELEMENT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" rs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tagName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      rs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("nextNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  ")])]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("ul",[a("li",[t._v("TreeWalker 比 NodeIterator 高级用法参数一样,但是多了几个api\n"),a("ul",[a("li",[t._v("除了 nextNode 和 previousNode 方法之外")]),t._v(" "),a("li",[t._v("parentNode")]),t._v(" "),a("li",[t._v("firstChild")]),t._v(" "),a("li",[t._v("lastChild")]),t._v(" "),a("li",[t._v("nextSibling")]),t._v(" "),a("li",[t._v("previousSibling")])])])]),t._v(" "),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件")]),t._v(" "),a("ul",[a("li",[t._v("事件流，'DOM2级事件'规定的事件包括三个阶段,事件捕获阶段,处理目标和事件冒泡阶段")]),t._v(" "),a("li",[t._v("传播流程:1、目标在捕获开始,但是不会接收到事件。2、处于目标阶段，事件处理。3、冒泡阶段,事件又传播会文档")])]),t._v(" "),a("h3",{attrs:{id:"ui事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ui事件","aria-hidden":"true"}},[t._v("#")]),t._v(" UI事件")]),t._v(" "),a("ul",[a("li",[t._v("load\n"),a("ul",[a("li",[t._v("1、当页面完全加载(所有资源),就会触发window上的load事件")]),t._v(" "),a("li",[t._v("2、图片加载完成也会触发img上的load事件(注意,事件要在src赋值之前指定)")]),t._v(" "),a("li",[t._v("3、script 动态加载js文件是否加载完毕(注意,事件和src顺序没有关系)")])])]),t._v(" "),a("li",[t._v("resize事件/scroll事件\n"),a("ul",[a("li",[t._v("resize，浏览器窗口调整新的高度和宽度,浏览器窗口最大小化，就会触发resize,绑定在window上(一般浏览器窗口变化了1px像素才会触发)")]),t._v(" "),a("li",[t._v("scroll，浏览器滑动触发")])])])]),t._v(" "),a("h3",{attrs:{id:"焦点事件-还有其他的不常用具体看书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#焦点事件-还有其他的不常用具体看书","aria-hidden":"true"}},[t._v("#")]),t._v(" 焦点事件(还有其他的不常用具体看书)")]),t._v(" "),a("ul",[a("li",[t._v("blur事件 失去焦点时候发出,不会冒泡")]),t._v(" "),a("li",[t._v("focus事件 聚集焦点,不会冒泡")])]),t._v(" "),a("h3",{attrs:{id:"鼠标事件-具体的看书"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#鼠标事件-具体的看书","aria-hidden":"true"}},[t._v("#")]),t._v(" 鼠标事件(具体的看书)")]),t._v(" "),a("ul",[a("li",[t._v("click 鼠标和enter键都可以触发")]),t._v(" "),a("li",[t._v("dblclick 双击 (注意 click 和dblclick 依赖于mousedown和mouseup事件触发而触发,mousedown和mouseup不依赖别的)")]),t._v(" "),a("li",[t._v("mousedown 鼠标按下任意键")]),t._v(" "),a("li",[t._v("mouseenter/mouseleave 进入离开 不会冒泡")]),t._v(" "),a("li",[t._v("mousemove 移入")]),t._v(" "),a("li",[t._v("mouseover/mouseout 进去移除  会冒泡")]),t._v(" "),a("li",[t._v("mouseup 鼠标抬起")])]),t._v(" "),a("h3",{attrs:{id:"键盘事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#键盘事件","aria-hidden":"true"}},[t._v("#")]),t._v(" 键盘事件")]),t._v(" "),a("ul",[a("li",[t._v("keydown/keypress 按下任意键 都会触发 可重复触发")]),t._v(" "),a("li",[t._v("文本事件 textInput 处理文件输入框的事件,在文本变化前面触发(e.data获取输入的值)")])]),t._v(" "),a("h3",{attrs:{id:"h5事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#h5事件","aria-hidden":"true"}},[t._v("#")]),t._v(" h5事件")]),t._v(" "),a("ul",[a("li",[t._v("DOMContentLoaded事件 等待dom树形成之后就会触发,load 事件是等所有资源和dom形成之后触发")]),t._v(" "),a("li",[t._v("readyStatechange事件 指元素或者文档加载状态 (只要支持他的 都有一个readyState事件,有5个阶段从促使化到加载完成具体看书)")]),t._v(" "),a("li",[t._v("hashchange 事件window下的事件,只要url#后的参数变化 就会触发")])]),t._v(" "),a("h3",{attrs:{id:"事件委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件委托","aria-hidden":"true"}},[t._v("#")]),t._v(" 事件委托")]),t._v(" "),a("ul",[a("li",[t._v("利用事件冒泡,指定一个事件处理程序,管理某一类型的所有事件")])])])}],!1,null,null,null);s.default=e.exports}}]);